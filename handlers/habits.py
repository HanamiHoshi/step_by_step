from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,    # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
    InlineKeyboardButton     # ‚Üê –ò –≠–¢–£ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from keyboards.inline_kb import get_habit_action_buttons
from database.db import (
    DB_PATH,
    mark_habit_done,
    get_habit_streak,
    add_habit,
    set_user_reminder_time,
    update_habit_name,
    delete_habit,
    get_user_habits,
    reset_user_data,
    reset_user_stats_only,  # ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨
)
import aiosqlite
from datetime import date, datetime
from aiogram.exceptions import TelegramBadRequest


router = Router()

class HabitStates(StatesGroup):
    waiting_for_habit_name = State()

@router.message(Command("add"))
async def cmd_add_habit(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å:\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã¬ª, ¬´–ß–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü¬ª, ¬´–ü—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω¬ª*", parse_mode="Markdown")
    await state.set_state(HabitStates.waiting_for_habit_name)

# handlers/habits.py

...

@router.message(HabitStates.waiting_for_habit_name)
async def habit_name_entered(message: Message, state: FSMContext):
    habit_name = message.text.strip()

    if len(habit_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return

    if len(habit_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
    habit_id = await add_habit(message.from_user.id, habit_name)

    if habit_id:
        # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–∞—è —ç—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT created_at FROM habits WHERE habit_id = ?",
                (habit_id,)
            )
            row = await cursor.fetchone()
            is_new = row and row[0]  # –µ—Å–ª–∏ –µ—Å—Ç—å created_at ‚Äî –∑–Ω–∞—á–∏—Ç, —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏

        if is_new:
            response_text = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ *¬´{habit_name}¬ª* –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {habit_id}).\n\n"
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–∂–∏–º–∞–π ¬´‚úÖ –°–¥–µ–ª–∞–ª¬ª ‚Äî –∏ —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é —Ü–µ–ø–æ—á–∫—É!"
            )
        else:
            response_text = (
                f"üîÅ –ü—Ä–∏–≤—ã—á–∫–∞ *¬´{habit_name}¬ª* —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ (ID: {habit_id}).\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
            )

        await message.answer(
            response_text,
            parse_mode="Markdown",
            reply_markup=get_habit_action_buttons()
        )
    else:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    await state.clear()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –°–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è"
@router.callback_query(F.data == "habit_done")
async def habit_done(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT habit_id, name FROM habits WHERE user_id = ? ORDER BY habit_id DESC LIMIT 1",
            (user_id,)
        )
        row = await cursor.fetchone()

    if not row:
        await callback.answer("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add", show_alert=True)
        return

    habit_id, habit_name = row

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    today = date.today().isoformat()
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT done FROM habit_logs WHERE habit_id = ? AND date = ?",
            (habit_id, today)
        )
        existing = await cursor.fetchone()

    if existing:
        done_status = "—Å–¥–µ–ª–∞–Ω–æ" if existing[0] else "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
        await callback.answer(f"‚ÑπÔ∏è –¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª —ç—Ç–æ –∫–∞–∫ '{done_status}' —Å–µ–≥–æ–¥–Ω—è", show_alert=True)
        return  # –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º

    # –ï—Å–ª–∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    await mark_habit_done(habit_id, done=True)
    streak = await get_habit_streak(habit_id)

    message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–¥–µ–ª–∞–ª –ø—Ä–∏–≤—ã—á–∫—É *¬´{habit_name}¬ª* —Å–µ–≥–æ–¥–Ω—è!\n\nüî• –¶–µ–ø–æ—á–∫–∞: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"

    if streak == 3:
        message_text += "\n\nü•â –£—Ä–∞! 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ ‚Äî —Ç—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏!"
    elif streak == 7:
        message_text += "\n\nü•à 7 –¥–Ω–µ–π! –¢—ã –∫–∞–∫ —Ä–æ–±–æ—Ç-—Ç—Ä—É–¥—è–≥–∞! ü§ñ"
    elif streak == 30:
        message_text += "\n\nü•á 30 –î–ù–ï–ô! –¢—ã –ª–µ–≥–µ–Ω–¥–∞! –≠—Ç–æ —É–∂–µ —á–∞—Å—Ç—å —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏! üéâ"

    try:
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=get_habit_action_buttons()
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(message_text, parse_mode="Markdown", reply_markup=get_habit_action_buttons())
        else:
            raise

    await callback.answer()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª"
@router.callback_query(F.data == "habit_skip")
async def habit_skip(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT habit_id, name FROM habits WHERE user_id = ? ORDER BY habit_id DESC LIMIT 1",
            (user_id,)
        )
        row = await cursor.fetchone()

    if not row:
        await callback.answer("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add", show_alert=True)
        return

    habit_id, habit_name = row

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    today = date.today().isoformat()
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT done FROM habit_logs WHERE habit_id = ? AND date = ?",
            (habit_id, today)
        )
        existing = await cursor.fetchone()

    if existing:
        done_status = "—Å–¥–µ–ª–∞–Ω–æ ‚úÖ" if existing[0] else "–ø—Ä–æ–ø—É—â–µ–Ω–æ ‚ùå"
        await callback.answer(f"‚ÑπÔ∏è –¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª ¬´{habit_name}¬ª –∫–∞–∫ {done_status} —Å–µ–≥–æ–¥–Ω—è", show_alert=True)
        return  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º

    # –ï—Å–ª–∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ "–Ω–µ —Å–¥–µ–ª–∞–Ω–æ"
    await mark_habit_done(habit_id, done=False)

    message_text = f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ø—Ä–∏–≤—ã—á–∫—É *¬´{habit_name}¬ª* —Å–µ–≥–æ–¥–Ω—è.\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π —à–∞–Ω—Å! üå±"

    try:
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=get_habit_action_buttons()
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(message_text, parse_mode="Markdown", reply_markup=get_habit_action_buttons())
        else:
            raise  # –µ—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º

    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
@router.message(Command("today"))
async def cmd_today(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT habit_id, name FROM habits WHERE user_id = ?",
            (user_id,)
        )
        habits_list = await cursor.fetchall()

    if not habits_list:
        await message.answer("üìù –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ /add")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    text = "üìã –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for habit_id, name in habits_list:
        text += f"üîπ {name} (ID: {habit_id})\n"

    text += "\nüëâ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    buttons = []
    for habit_id, name in habits_list:
        buttons.append([
            InlineKeyboardButton(text=f"‚úÖ {name}", callback_data=f"done_{habit_id}"),
            InlineKeyboardButton(text=f"‚ùå {name}", callback_data=f"skip_{habit_id}")
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(text, reply_markup=keyboard)
@router.callback_query(F.data.startswith("done_"))
async def today_done(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    await mark_habit_done(habit_id, done=True)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM habits WHERE habit_id = ?", (habit_id,))
        row = await cursor.fetchone()

    if not row:
        await callback.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    habit_name = row[0]
    streak = await get_habit_streak(habit_id)

    message_text = f"‚úÖ –¢—ã —Å–¥–µ–ª–∞–ª ¬´{habit_name}¬ª —Å–µ–≥–æ–¥–Ω—è!\nüî• –¶–µ–ø–æ—á–∫–∞: {streak} –¥–Ω–µ–π"

    if streak == 3:
        message_text += "\n\nü•â 3 –¥–Ω—è! –¢—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏!"
    elif streak == 7:
        message_text += "\n\nü•à 7 –¥–Ω–µ–π! –¢—ã ‚Äî –º–∞—à–∏–Ω–∞!"
    elif streak == 30:
        message_text += "\n\nü•á 30 –î–ù–ï–ô! –¢—ã –ª–µ–≥–µ–Ω–¥–∞!"

    await callback.message.edit_text(message_text)
    await callback.answer()

@router.callback_query(F.data.startswith("skip_"))
async def today_skip(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    await mark_habit_done(habit_id, done=False)

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM habits WHERE habit_id = ?", (habit_id,))
        row = await cursor.fetchone()

    if not row:
        await callback.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    habit_name = row[0]
    await callback.message.edit_text(f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª ¬´{habit_name}¬ª —Å–µ–≥–æ–¥–Ω—è. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π —à–∞–Ω—Å!")
    await callback.answer()
@router.message(Command("remindme"))
async def cmd_remindme(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚è∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/remindme 19:30`\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å ‚Äî `/remindme off`",
            parse_mode="Markdown"
        )
        return

    time_str = args[1].strip()

    if time_str.lower() == "off":
        await set_user_reminder_time(message.from_user.id, None)
        await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º üê¢")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_str, "%H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 19:30")
        return

    await set_user_reminder_time(message.from_user.id, time_str)
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ *{time_str}*.\n\n"
        "üåø –ß–µ—Ä–µ–ø–∞—à–∫–∞ –°—Ç–µ–ø–∞ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª!",
        parse_mode="Markdown"
    )
@router.message(Command("testreminder"))
async def cmd_test_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –°–ï–ô–ß–ê–°"""
    user_id = message.from_user.id
    from utils.scheduler import send_daily_reminder
    from aiogram import Bot

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞)
    bot = message.bot

    await send_daily_reminder(bot, user_id)
    await message.answer("üì¨ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
@router.message(Command("list"))
async def cmd_list_habits(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
    habits = await get_user_habits(user_id)  # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ db.py

    if not habits:
        await message.answer("üìù –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ /add")
        return

    text = "üìã *–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:*\n\n"
    for habit_id, name in habits:
        text += f"üîπ ID {habit_id}: *{name}*\n"

    text += "\n‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî `/edit ID –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`\nüóëÔ∏è –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å ‚Äî `/delete ID`"

    await message.answer(text, parse_mode="Markdown")
async def update_habit_name(habit_id: int, new_name: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    if len(new_name.strip()) < 2:
        return False
    if len(new_name) > 100:
        return False

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE habits SET name = ? WHERE habit_id = ?",
            (new_name.strip(), habit_id)
        )
        await db.commit()

        cursor = await db.execute("SELECT changes()")
        changes = await cursor.fetchone()
        return changes[0] > 0  # –µ—Å–ª–∏ 0 ‚Äî –∑–Ω–∞—á–∏—Ç, –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(Command("edit"))
async def cmd_edit_habit(message: Message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: /edit <ID> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>"""
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer(
            "‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/edit ID –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/edit 1 –ü–∏—Ç—å 3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã`\n\n"
            "–£–∑–Ω–∞—Ç—å ID: /list",
            parse_mode="Markdown"
        )
        return

    try:
        habit_id = int(args[1])
        new_name = args[2].strip()
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT h.habit_id FROM habits h JOIN users u ON h.user_id = u.user_id WHERE h.habit_id = ? AND u.user_id = ?",
            (habit_id, message.from_user.id)
        )
        row = await cursor.fetchone()

    if not row:
        await message.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    success = await update_habit_name(habit_id, new_name)

    if success:
        await message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–≤—ã—á–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è:\n*¬´{new_name}¬ª*\n\n"
            "üåø –ß–µ—Ä–µ–ø–∞—à–∫–∞ –°—Ç–µ–ø–∞ –æ–¥–æ–±—Ä—è–µ—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º üòä",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–æ –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
pending_deletions = set()

@router.message(Command("delete"))
async def cmd_delete_habit(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "üóëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/delete ID`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/delete 1`\n\n"
            "–£–∑–Ω–∞—Ç—å ID: /list",
            parse_mode="Markdown"
        )
        return

    try:
        habit_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT name FROM habits WHERE habit_id = ? AND user_id = ?",
            (habit_id, message.from_user.id)
        )
        row = await cursor.fetchone()

    if not row:
        await message.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.")
        return

    habit_name = row[0]
    pending_deletions.add(habit_id)

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{habit_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]
    ])

    await message.answer(
        f"‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É *¬´{habit_name}¬ª*?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[2])

    if habit_id not in pending_deletions:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /delete", show_alert=True)
        return

    success = await delete_habit(habit_id, callback.from_user.id)

    if success:
        await callback.message.edit_text(
            f"üóëÔ∏è –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n"
            "üåø –°—Ç–µ–ø–∞ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å–∫–∞—Ç—å, —á—Ç–æ–±—ã —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ¬ª üê¢"
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    pending_deletions.discard(habit_id)
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await callback.answer()
pending_resets = set()

@router.message(Command("reset"))
async def cmd_reset(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    pending_resets.add(message.from_user.id)

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="confirm_reset"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
        ]
    ])

    await message.answer(
        "‚ö†Ô∏è *–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?*\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ —Ü–µ–ø–æ—á–∫–∏ –∏ –ª–æ–≥–∏\n"
        "‚Ä¢ –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
        "–¢—ã –Ω–∞—á–Ω—ë—à—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑! üå±",
        parse_mode="Markdown",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data == "confirm_reset")
async def confirm_reset(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in pending_resets:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /reset", show_alert=True)
        return

    success = await reset_user_data(user_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ *–ì–æ—Ç–æ–≤–æ!* –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "üåø –ß–µ—Ä–µ–ø–∞—à–∫–∞ –°—Ç–µ–ø–∞ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç ‚Äî —ç—Ç–æ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –µ—â—ë –ª—É—á—à–µ!¬ª üê¢\n"
            "–ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add ‚Äî —è —Å —Ç–æ–±–æ–π!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è –µ—â—ë –Ω–µ –±—ã–ª–æ –ø—Ä–∏–≤—ã—á–µ–∫.",
            parse_mode="Markdown"
        )

    pending_resets.discard(user_id)
    await callback.answer()

@router.callback_query(F.data == "cancel_reset")
async def cancel_reset(callback: CallbackQuery):
    await callback.message.edit_text(
        "üòå –û—Ç–º–µ–Ω–µ–Ω–æ. –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n"
        "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ ‚Äî —è –Ω–∞–ø–æ–º–Ω—é üòâ",
        parse_mode="Markdown"
    )
    await callback.answer()
# –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
pending_resets = set()

@router.message(Command("reset"))
async def cmd_reset(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    pending_resets.add(message.from_user.id)

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="confirm_reset"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
        ]
    ])

    await message.answer(
        "‚ö†Ô∏è *–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?*\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ —Ü–µ–ø–æ—á–∫–∏ –∏ –ª–æ–≥–∏\n"
        "‚Ä¢ –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
        "–¢—ã –Ω–∞—á–Ω—ë—à—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑! üå±",
        parse_mode="Markdown",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data == "confirm_reset")
async def confirm_reset(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in pending_resets:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /reset", show_alert=True)
        return

    success = await reset_user_data(user_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ *–ì–æ—Ç–æ–≤–æ!* –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "üåø –ß–µ—Ä–µ–ø–∞—à–∫–∞ –°—Ç–µ–ø–∞ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç ‚Äî —ç—Ç–æ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –µ—â—ë –ª—É—á—à–µ!¬ª üê¢\n"
            "–ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add ‚Äî —è —Å —Ç–æ–±–æ–π!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è –µ—â—ë –Ω–µ –±—ã–ª–æ –ø—Ä–∏–≤—ã—á–µ–∫.",
            parse_mode="Markdown"
        )

    pending_resets.discard(user_id)
    await callback.answer()

@router.callback_query(F.data == "cancel_reset")
async def cancel_reset(callback: CallbackQuery):
    await callback.message.edit_text(
        "üòå –û—Ç–º–µ–Ω–µ–Ω–æ. –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n"
        "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ ‚Äî —è –Ω–∞–ø–æ–º–Ω—é üòâ",
        parse_mode="Markdown"
    )
    await callback.answer()
@router.message(Command("resetstats"))
async def cmd_resetstats(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ª–æ–≥–∏), –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è"""
    success = await reset_user_stats_only(message.from_user.id)

    if success:
        await message.answer(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!* –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞.\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ø–æ—á–∫–∏ ‚Äî —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üå±",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞.")