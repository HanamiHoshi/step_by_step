# utils/scheduler.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
import asyncio
import aiosqlite
from database.db import get_user_reminder_time, get_user_habits, DB_PATH
from datetime import datetime

scheduler = AsyncIOScheduler()

async def send_daily_reminder(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_time = await get_user_reminder_time(user_id)
    if not reminder_time:
        return  # –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
    habits = await get_user_habits(user_id)
    if not habits:
        return  # –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî –Ω–µ—á–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    habit_names = "\n".join([f"‚Ä¢ {name}" for _, name in habits])
    message_text = (
        f"üåø *–ß–µ—Ä–µ–ø–∞—à–∫–∞ –°—Ç–µ–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç:*\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏:\n\n"
        f"{habit_names}\n\n"
        f"–ü–æ—Ç–æ–º –æ—Ç–º–µ—Ç—å —á–µ—Ä–µ–∑ /today –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ üòä\n"
        f"–¢—ã –º–æ–ª–æ–¥–µ—Ü ‚Äî —è –≤ —Ç–µ–±—è –≤–µ—Ä—é! üê¢üí™"
    )

    try:
        await bot.send_message(user_id, message_text, parse_mode="Markdown")
    except Exception as e:
        print(f"‚ùå [SCHEDULER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def schedule_daily_reminders(bot: Bot):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–≥–æ-—Ç–æ
    async def check_and_send():
        from database.db import init_db  # –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT user_id, reminder_time FROM users WHERE reminder_time IS NOT NULL")
            users = await cursor.fetchall()

        now = datetime.now()
        current_time = now.strftime("%H:%M")

        for user_id, reminder_time in users:
            if reminder_time == current_time:
                asyncio.create_task(send_daily_reminder(bot, user_id))

    scheduler.add_job(check_and_send, 'interval', seconds=60, id='reminder_checker')