# database/db.py
import aiosqlite
import os
from datetime import date

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª –ë–î
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DB_PATH = os.path.join(BASE_DIR, "habits.db")

async def init_db():
    """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç + –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT
            )
        """)
        print("‚úÖ [DB] –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü reminder_time, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor = await db.execute("PRAGMA table_info(users)")
        columns = await cursor.fetchall()
        column_names = [col[1] for col in columns]

        if "reminder_time" not in column_names:
            await db.execute("ALTER TABLE users ADD COLUMN reminder_time TEXT DEFAULT NULL")
            print("‚ûï [DB] –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'reminder_time' –≤ —Ç–∞–±–ª–∏—Ü—É 'users'")

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        await db.execute("""
            CREATE TABLE IF NOT EXISTS habits (
                habit_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ [DB] –¢–∞–±–ª–∏—Ü–∞ 'habits' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await db.execute("""
            CREATE TABLE IF NOT EXISTS habit_logs (
                log_id INTEGER PRIMARY KEY AUTOINCREMENT,
                habit_id INTEGER NOT NULL,
                date TEXT NOT NULL,  -- —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                done BOOLEAN DEFAULT 1,
                FOREIGN KEY (habit_id) REFERENCES habits(habit_id) ON DELETE CASCADE,
                UNIQUE(habit_id, date)
            )
        """)
        print("‚úÖ [DB] –¢–∞–±–ª–∏—Ü–∞ 'habit_logs' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        await db.commit()
        print("üíæ [DB] –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å?
        cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = await cursor.fetchall()
        print("üìã [DB] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", [t[0] for t in tables])

async def add_user(user_id: int, username: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        await db.commit()
        print(f"üë§ [DB] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def add_habit(user_id: int, habit_name: str) -> int | None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—â—ë –Ω–µ—Ç. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID."""
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT habit_id FROM habits WHERE user_id = ? AND name = ? COLLATE NOCASE",
            (user_id, habit_name)
        )
        existing = await cursor.fetchone()

        if existing:
            habit_id = existing[0]
            print(f"üîÅ [DB] –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {habit_id})")
            return habit_id

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        await add_user(user_id)

        cursor = await db.execute(
            "INSERT INTO habits (user_id, name) VALUES (?, ?) RETURNING habit_id",
            (user_id, habit_name)
        )
        row = await cursor.fetchone()
        await db.commit()

        if row:
            habit_id = row[0]
            print(f"üìù [DB] –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' (ID: {habit_id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return habit_id
        else:
            print(f"‚ùå [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ '{habit_name}'")
            return None

async def mark_habit_done(habit_id: int, done: bool = True):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today().isoformat()  # "2025-04-05"
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO habit_logs (habit_id, date, done)
            VALUES (?, ?, ?)
            ON CONFLICT(habit_id, date) DO UPDATE SET done = excluded.done
            """,
            (habit_id, today, done)
        )
        await db.commit()
        status = "‚úÖ" if done else "‚ùå"
        print(f"[DB] –ü—Ä–∏–≤—ã—á–∫–∞ {habit_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status} –Ω–∞ {today}")

async def get_habit_streak(habit_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–ø–æ—á–∫—É –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ (streak)"""
    today = date.today()
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            """
            SELECT date FROM habit_logs
            WHERE habit_id = ? AND done = 1
            ORDER BY date DESC
            """,
            (habit_id,)
        )
        rows = await cursor.fetchall()

        if not rows:
            return 0

        streak = 0
        expected_date = today

        for (log_date,) in rows:
            log_date = date.fromisoformat(log_date)
            if log_date == expected_date:
                streak += 1
                expected_date = expected_date.replace(day=expected_date.day - 1)
            else:
                break

        return streak

async def get_user_habits(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [(habit_id, name), ...]"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT habit_id, name FROM habits WHERE user_id = ?",
            (user_id,)
        )
        rows = await cursor.fetchall()
        return rows

async def get_user_stats(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–ø—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –ª—É—á—à–∞—è —Ü–µ–ø–æ—á–∫–∞"""
    today = date.today().isoformat()

    async with aiosqlite.connect(DB_PATH) as db:
        # –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫
        cursor = await db.execute("SELECT COUNT(*) FROM habits WHERE user_id = ?", (user_id,))
        total_habits = (await cursor.fetchone())[0]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
        cursor = await db.execute("""
            SELECT COUNT(*) FROM habit_logs hl
            JOIN habits h ON hl.habit_id = h.habit_id
            WHERE h.user_id = ? AND hl.date = ? AND hl.done = 1
        """, (user_id, today))
        done_today = (await cursor.fetchone())[0]

        # –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
        cursor = await db.execute("""
            SELECT COUNT(*) FROM habit_logs hl
            JOIN habits h ON hl.habit_id = h.habit_id
            WHERE h.user_id = ? AND hl.date = ? AND hl.done = 0
        """, (user_id, today))
        skipped_today = (await cursor.fetchone())[0]

        # –õ—É—á—à–∞—è —Ü–µ–ø–æ—á–∫–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        cursor = await db.execute("""
            SELECT h.name, MAX(streak_table.streak) as max_streak
            FROM habits h
            JOIN (
                SELECT habit_id, COUNT(*) as streak
                FROM (
                    SELECT habit_id, date, done,
                           date(date, '-' || ROW_NUMBER() OVER (PARTITION BY habit_id ORDER BY date DESC) || ' days') as grp
                    FROM habit_logs
                    WHERE done = 1
                )
                GROUP BY habit_id, grp
            ) as streak_table ON h.habit_id = streak_table.habit_id
            WHERE h.user_id = ?
            GROUP BY h.habit_id
            ORDER BY max_streak DESC
            LIMIT 1
        """, (user_id,))
        best_streak_row = await cursor.fetchone()
        best_streak_name = best_streak_row[0] if best_streak_row else None
        best_streak_value = best_streak_row[1] if best_streak_row else 0

        # –¢–µ–∫—É—â–∞—è —Ü–µ–ø–æ—á–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏–≤—ã—á–∫–µ
        cursor = await db.execute("""
            SELECT habit_id, name FROM habits
            WHERE user_id = ?
            ORDER BY habit_id DESC LIMIT 1
        """, (user_id,))
        last_habit = await cursor.fetchone()
        current_streak_name = None
        current_streak_value = 0

        if last_habit:
            habit_id, current_streak_name = last_habit
            current_streak_value = await get_habit_streak(habit_id)

        return {
            "total_habits": total_habits,
            "done_today": done_today,
            "skipped_today": skipped_today,
            "best_streak": {"name": best_streak_name, "value": best_streak_value},
            "current_streak": {"name": current_streak_name, "value": current_streak_value}
        }

async def set_user_reminder_time(user_id: int, reminder_time: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET reminder_time = ? WHERE user_id = ?",
            (reminder_time, user_id)
        )
        await db.commit()
        print(f"‚è∞ [DB] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def get_user_reminder_time(user_id: int) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT reminder_time FROM users WHERE user_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        return row[0] if row and row[0] else None

async def update_habit_name(habit_id: int, new_name: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    if len(new_name.strip()) < 2:
        return False
    if len(new_name) > 100:
        return False

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE habits SET name = ? WHERE habit_id = ?",
            (new_name.strip(), habit_id)
        )
        await db.commit()

        cursor = await db.execute("SELECT changes()")
        changes = await cursor.fetchone()
        return changes[0] > 0  # –µ—Å–ª–∏ 0 ‚Äî –∑–Ω–∞—á–∏—Ç, –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏

async def delete_habit(habit_id: int, user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –∏ –µ—ë –ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor = await db.execute(
            "SELECT 1 FROM habits WHERE habit_id = ? AND user_id = ?",
            (habit_id, user_id)
        )
        if not await cursor.fetchone():
            return False

        # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏
        await db.execute("DELETE FROM habit_logs WHERE habit_id = ?", (habit_id,))
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø—Ä–∏–≤—ã—á–∫—É
        await db.execute("DELETE FROM habits WHERE habit_id = ? AND user_id = ?", (habit_id, user_id))
        await db.commit()

        cursor = await db.execute("SELECT changes()")
        changes = await cursor.fetchone()
        return changes[0] > 0
async def reset_user_data(user_id: int) -> bool:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    async with aiosqlite.connect(DB_PATH) as db:
        # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏
        await db.execute("DELETE FROM habit_logs WHERE habit_id IN (SELECT habit_id FROM habits WHERE user_id = ?)", (user_id,))
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
        await db.execute("DELETE FROM habits WHERE user_id = ?", (user_id,))
        await db.commit()

        cursor = await db.execute("SELECT changes()")
        changes = await cursor.fetchone()
        return changes[0] > 0  # –µ—Å–ª–∏ 0 ‚Äî –∑–Ω–∞—á–∏—Ç, –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö

async def reset_user_stats_only(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM habit_logs WHERE habit_id IN (SELECT habit_id FROM habits WHERE user_id = ?)", (user_id,))
        await db.commit()

        cursor = await db.execute("SELECT changes()")
        changes = await cursor.fetchone()
        return changes[0] > 0